Secure Document Conversion Tool – Progress Snapshot (as of current checkpoint)
-------------------------------------------------------------------------------

✅ STATUS: Core functional conversion API complete, containerized, and hardened.
Tool can convert:
- PDF → DOCX (via `pdf2docx`)
- DOCX → PDF (via LibreOffice headless)
- XLSX → PDF (via LibreOffice headless)

-------------------------------------------------------------------------------
Project Structure:
- FastAPI backend organized under `/app`
- Modular routes, services, and utils
- All conversions done offline; no third-party API involved

-------------------------------------------------------------------------------
🔐 Security:
- API key-based auth (`X-API-Key`) enforced for all `/convert/*` routes
- Key is set via `API_KEY` env var (default: "dev-key-change-me")

📁 Upload Handling:
- Files are streamed and saved securely
- Upload size cap enforced (default: 25MB)
- Files are auto-deleted after serving to client

📦 Dockerization:
- Dockerfile bundles Python, FastAPI, LibreOffice, fonts
- `.dockerignore` keeps builds clean
- Container exposes port 8000 with API at `/docs`

🪵 Logging:
- Structured logs include START, OK, FAIL messages with timings
- LOG_LEVEL configurable via env var

🌡 Health:
- Public health check available at `/healthz`

-------------------------------------------------------------------------------
✅ Commands Used So Far:

Build and run the container:
  docker build -t secure-doc-converter .
  docker run -d --name sdc -p 8000:8000     -e API_KEY="supersecret123"     -e LOG_LEVEL="INFO"     -e MAX_UPLOAD_BYTES=26214400     secure-doc-converter

Test via Swagger:
  http://localhost:8000/docs

Test via curl:
  curl -X POST http://localhost:8000/convert/docx-to-pdf \
    -H "X-API-Key: supersecret123" \
    -F "file=@sample.docx" --output out.pdf

-------------------------------------------------------------------------------
🧪 Tested:
- All 3 endpoints with valid files
- Oversized file rejection (HTTP 413)
- Unauthorized access (HTTP 401)
- Logs and cleanup verification inside Docker

-------------------------------------------------------------------------------
✅ Files Implemented:
- app/main.py              → FastAPI app setup + router include
- app/routes/convert.py    → All endpoints with logging, guards, and cleanup
- app/services/...         → Individual conversion logic (pdf2docx, libreoffice)
- app/utils/file_handler.py → Save/delete/cleanup helpers
- app/utils/logger.py      → Central logger config
- app/auth.py              → API key verification middleware
- app/config.py            → Centralized env-based config

-------------------------------------------------------------------------------
📝 Deliverables Created:
- README.md                → Clean runbook and usage doc (Markdown format)
- .dockerignore            → Build context cleaner

-------------------------------------------------------------------------------
⏭️ Next Possible Steps:
- docker-compose.yml for easier orchestration
- Add frontend UI (Next.js or plain HTML)
- Add PDF → image support (png/jpeg preview)
- Add file conversion audit logging to DB or file

-------------------------------------------------------------------------------